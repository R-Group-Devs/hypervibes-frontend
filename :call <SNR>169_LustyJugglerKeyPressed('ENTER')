import { useState, useEffect } from 'react';
import { useWallet } from 'use-wallet';

export default () => {
  // @ts-ignore
  const { _web3ReactContext, connectors } = useWallet();
  const { activate, active } = _web3ReactContext;
  // @ts-ignore
  const injected = connectors.injected.web3ReactConnector({ chainId: 1 });
  const [tried, setTried] = useState(false);

  useEffect(() => {
    injected.isAuthorized().then((isAuthorized: boolean) => {
      if (isAuthorized) {
        activate(injected, undefined, true).catch(() => {
          setTried(true);
        });
      } else {
        setTried(true);
      }
    });
    // eslint-disable-next-line
  }, []); // intentionally only running on mount (make sure it's only mounted once :))

  // if the connection worked, wait until we get confirmation of that to flip the flag
  useEffect(() => {
    if (!tried && active) {
      setTried(true);
    }
  }, [tried, active]);

  return tried;
};
